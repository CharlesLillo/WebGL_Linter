<html>
<head>
<title>Project 1 - Charles Lillo</title>
    <script src="jQuery.js"></script>
    <script src="gl-matrix.js"></script>
    
    <!--Shaders for frag and vertex-->
    <script id="vertex" type="x-shader">
    attribute vec2 aVertexPosition;

    void main() {
        gl_PointSize = 3.0;
        gl_Position = vec4(aVertexPosition, 0.0, 1.0);
    }
    </script>

    <script id="fragment" type="x-shader">
    #ifdef GL_ES
    precision highp float;
    #endif
    uniform vec4 uColor;
    void main() {
        gl_FragColor = uColor;
    }
    </script>

    <!--Main Function-->
    <script type="text/javascript">

    //Sets initial temperature
    $( document ).ready(function() {
        $("#temp").text("Temperature: "+$("#rangeTemp").val());
        //Change function for slider
            $("#rangeTemp").change(function () {
                start($("#rangeTemp").val(),$("#selector").val());
                $("#temp").text("Temperature: "+$("#rangeTemp").val());
    });
    //Changes spectrum to monitor
    $("#selector").change(function () {
        start($("#rangeTemp").val(),$("#selector").val());
    });

    });


    //Data

    //White values
    var IlluminantC = [0.3101, 0.3162]; /* For NTSC television */
    var IlluminantD65 = [0.3127, 0.3291]; /* Medium White: For EBU and SMPTE */
    var IlluminantD50 = [0.34567, 0.3585]; /* Warm White: For wide gamut */
    var IlluminantD75 = [0.29902, 0.31485]; /* Cool White: Day Light*/
    var I9300K = [0.2848, 0.2932]; /* High efficiency blue phospor monitor*/
    var IlluminantE = [0.33333333, 0.33333333]; /* CIE equal-energy illuminant */

    //Reflectance spectrum r(l)
    var colorChecker = [
        [0.055, 0.058, 0.061, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.062, 0.063, 0.065, 0.070, 0.076, 0.079, 0.081, 0.084, 0.091, 0.103, 0.119, 0.134, 0.143, 0.147, 0.151, 0.158, 0.168, 0.179, 0.188, 0.190, 0.186, 0.181, 0.182, 0.187, 0.196, 0.209],
        [0.117, 0.143, 0.175, 0.191, 0.196, 0.199, 0.204, 0.213, 0.228, 0.251, 0.280, 0.309, 0.329, 0.333, 0.315, 0.286, 0.273, 0.276, 0.277, 0.289, 0.339, 0.420, 0.488, 0.525, 0.546, 0.562, 0.578, 0.595, 0.612, 0.625, 0.638, 0.656, 0.678, 0.700, 0.717, 0.734],
        [0.130, 0.177, 0.251, 0.306, 0.324, 0.330, 0.333, 0.331, 0.323, 0.311, 0.298, 0.285, 0.269, 0.250, 0.231, 0.214, 0.199, 0.185, 0.169, 0.157, 0.149, 0.145, 0.142, 0.141, 0.141, 0.141, 0.143, 0.147, 0.152, 0.154, 0.150, 0.144, 0.136, 0.132, 0.135, 0.147],
        [0.051, 0.054, 0.056, 0.057, 0.058, 0.059, 0.060, 0.061, 0.062, 0.063, 0.065, 0.067, 0.075, 0.101, 0.145, 0.178, 0.184, 0.170, 0.149, 0.133, 0.122, 0.115, 0.109, 0.105, 0.104, 0.106, 0.109, 0.112, 0.114, 0.114, 0.112, 0.112, 0.115, 0.120, 0.125, 0.130],
        [0.144, 0.198, 0.294, 0.375, 0.408, 0.421, 0.426, 0.426, 0.419, 0.403, 0.379, 0.346, 0.311, 0.281, 0.254, 0.229, 0.214, 0.208, 0.202, 0.194, 0.193, 0.200, 0.214, 0.230, 0.241, 0.254, 0.279, 0.313, 0.348, 0.366, 0.366, 0.359, 0.358, 0.365, 0.377, 0.398],
        [0.136, 0.179, 0.247, 0.297, 0.320, 0.337, 0.355, 0.381, 0.419, 0.466, 0.510, 0.546, 0.567, 0.574, 0.569, 0.551, 0.524, 0.488, 0.445, 0.400, 0.350, 0.299, 0.252, 0.221, 0.204, 0.196, 0.191, 0.188, 0.191, 0.199, 0.212, 0.223, 0.232, 0.233, 0.229, 0.229],
        [0.054, 0.054, 0.053, 0.054, 0.054, 0.055, 0.055, 0.055, 0.056, 0.057, 0.058, 0.061, 0.068, 0.089, 0.125, 0.154, 0.174, 0.199, 0.248, 0.335, 0.444, 0.538, 0.587, 0.595, 0.591, 0.587, 0.584, 0.584, 0.590, 0.603, 0.620, 0.639, 0.655, 0.663, 0.663, 0.667],
        [0.122, 0.164, 0.229, 0.286, 0.327, 0.361, 0.388, 0.400, 0.392, 0.362, 0.316, 0.260, 0.209, 0.168, 0.138, 0.117, 0.104, 0.096, 0.090, 0.086, 0.084, 0.084, 0.084, 0.084, 0.084, 0.085, 0.090, 0.098, 0.109, 0.123, 0.143, 0.169, 0.205, 0.244, 0.287, 0.332],
        [0.096, 0.115, 0.131, 0.135, 0.133, 0.132, 0.130, 0.128, 0.125, 0.120, 0.115, 0.110, 0.105, 0.100, 0.095, 0.093, 0.092, 0.093, 0.096, 0.108, 0.156, 0.265, 0.399, 0.500, 0.556, 0.579, 0.588, 0.591, 0.593, 0.594, 0.598, 0.602, 0.607, 0.609, 0.609, 0.610],
        [0.092, 0.116, 0.146, 0.169, 0.178, 0.173, 0.158, 0.139, 0.119, 0.101, 0.087, 0.075, 0.066, 0.060, 0.056, 0.053, 0.051, 0.051, 0.052, 0.052, 0.051, 0.052, 0.058, 0.073, 0.096, 0.119, 0.141, 0.166, 0.194, 0.227, 0.265, 0.309, 0.355, 0.396, 0.436, 0.478],
        [0.061, 0.061, 0.062, 0.063, 0.064, 0.066, 0.069, 0.075, 0.085, 0.105, 0.139, 0.192, 0.271, 0.376, 0.476, 0.531, 0.549, 0.546, 0.528, 0.504, 0.471, 0.428, 0.381, 0.347, 0.327, 0.318, 0.312, 0.310, 0.314, 0.327, 0.345, 0.363, 0.376, 0.381, 0.378, 0.379],
        [0.063, 0.063, 0.063, 0.064, 0.064, 0.064, 0.065, 0.066, 0.067, 0.068, 0.071, 0.076, 0.087, 0.125, 0.206, 0.305, 0.383, 0.431, 0.469, 0.518, 0.568, 0.607, 0.628, 0.637, 0.640, 0.642, 0.645, 0.648, 0.651, 0.653, 0.657, 0.664, 0.673, 0.680, 0.684, 0.688],
        [0.066, 0.079, 0.102, 0.146, 0.200, 0.244, 0.282, 0.309, 0.308, 0.278, 0.231, 0.178, 0.130, 0.094, 0.070, 0.054, 0.046, 0.042, 0.039, 0.038, 0.038, 0.038, 0.038, 0.039, 0.039, 0.040, 0.041, 0.042, 0.044, 0.045, 0.046, 0.046, 0.048, 0.052, 0.057, 0.065],
        [0.052, 0.053, 0.054, 0.055, 0.057, 0.059, 0.061, 0.066, 0.075, 0.093, 0.125, 0.178, 0.246, 0.307, 0.337, 0.334, 0.317, 0.293, 0.262, 0.230, 0.198, 0.165, 0.135, 0.115, 0.104, 0.098, 0.094, 0.092, 0.093, 0.097, 0.102, 0.108, 0.113, 0.115, 0.114, 0.114],
        [0.050, 0.049, 0.048, 0.047, 0.047, 0.047, 0.047, 0.047, 0.046, 0.045, 0.044, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.050, 0.054, 0.060, 0.072, 0.104, 0.178, 0.312, 0.467, 0.581, 0.644, 0.675, 0.690, 0.698, 0.706, 0.715, 0.724, 0.730, 0.734, 0.738],
        [0.058, 0.054, 0.052, 0.052, 0.053, 0.054, 0.056, 0.059, 0.067, 0.081, 0.107, 0.152, 0.225, 0.336, 0.462, 0.559, 0.616, 0.650, 0.672, 0.694, 0.710, 0.723, 0.731, 0.739, 0.746, 0.752, 0.758, 0.764, 0.769, 0.771, 0.776, 0.782, 0.790, 0.796, 0.799, 0.804],
        [0.145, 0.195, 0.283, 0.346, 0.362, 0.354, 0.334, 0.306, 0.276, 0.248, 0.218, 0.190, 0.168, 0.149, 0.127, 0.107, 0.100, 0.102, 0.104, 0.109, 0.137, 0.200, 0.290, 0.400, 0.516, 0.615, 0.687, 0.732, 0.760, 0.774, 0.783, 0.793, 0.803, 0.812, 0.817, 0.825],
        [0.108, 0.141, 0.192, 0.236, 0.261, 0.286, 0.317, 0.353, 0.390, 0.426, 0.446, 0.444, 0.423, 0.385, 0.337, 0.283, 0.231, 0.185, 0.146, 0.118, 0.101, 0.090, 0.082, 0.076, 0.074, 0.073, 0.073, 0.074, 0.076, 0.077, 0.076, 0.075, 0.073, 0.072, 0.074, 0.079],
        [0.189, 0.255, 0.423, 0.660, 0.811, 0.862, 0.877, 0.884, 0.891, 0.896, 0.899, 0.904, 0.907, 0.909, 0.911, 0.910, 0.911, 0.914, 0.913, 0.916, 0.915, 0.916, 0.914, 0.915, 0.918, 0.919, 0.921, 0.923, 0.924, 0.922, 0.922, 0.925, 0.927, 0.930, 0.930, 0.933],
        [0.171, 0.232, 0.365, 0.507, 0.567, 0.583, 0.588, 0.590, 0.591, 0.590, 0.588, 0.588, 0.589, 0.589, 0.591, 0.590, 0.590, 0.590, 0.589, 0.591, 0.590, 0.590, 0.587, 0.585, 0.583, 0.580, 0.578, 0.576, 0.574, 0.572, 0.571, 0.569, 0.568, 0.568, 0.566, 0.566],
        [0.144, 0.192, 0.272, 0.331, 0.350, 0.357, 0.361, 0.363, 0.363, 0.361, 0.359, 0.358, 0.358, 0.359, 0.360, 0.360, 0.361, 0.361, 0.360, 0.362, 0.362, 0.361, 0.359, 0.358, 0.355, 0.352, 0.350, 0.348, 0.345, 0.343, 0.340, 0.338, 0.335, 0.334, 0.332, 0.331],
        [0.105, 0.131, 0.163, 0.180, 0.186, 0.190, 0.193, 0.194, 0.194, 0.192, 0.191, 0.191, 0.191, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.191, 0.189, 0.188, 0.186, 0.184, 0.182, 0.181, 0.179, 0.178, 0.176, 0.174, 0.173, 0.172, 0.171],
        [0.068, 0.077, 0.084, 0.087, 0.089, 0.090, 0.092, 0.092, 0.091, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.089, 0.089, 0.088, 0.087, 0.086, 0.086, 0.085, 0.084, 0.084, 0.083, 0.083, 0.082, 0.081, 0.081, 0.081],
        [0.031, 0.032, 0.032, 0.033, 0.033, 0.033, 0.033, 0.033, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.032, 0.033]
    ];

    //CIE Colour matching function x-bar(l)
    var cie_colour_match = [
        [0.0014, 0.0000, 0.0065],
        [0.0022, 0.0001, 0.0105],
        [0.0042, 0.0001, 0.0201],
        [0.0076, 0.0002, 0.0362],
        [0.0143, 0.0004, 0.0679],
        [0.0232, 0.0006, 0.1102],
        [0.0435, 0.0012, 0.2074],
        [0.0776, 0.0022, 0.3713],
        [0.1344, 0.0040, 0.6456],
        [0.2148, 0.0073, 1.0391],
        [0.2839, 0.0116, 1.3856],
        [0.3285, 0.0168, 1.6230],
        [0.3483, 0.0230, 1.7471],
        [0.3481, 0.0298, 1.7826],
        [0.3362, 0.0380, 1.7721],
        [0.3187, 0.0480, 1.7441],
        [0.2908, 0.0600, 1.6692],
        [0.2511, 0.0739, 1.5281],
        [0.1954, 0.0910, 1.2876],
        [0.1421, 0.1126, 1.0419],
        [0.0956, 0.1390, 0.8130],
        [0.0580, 0.1693, 0.6162],
        [0.0320, 0.2080, 0.4652],
        [0.0147, 0.2586, 0.3533],
        [0.0049, 0.3230, 0.2720],
        [0.0024, 0.4073, 0.2123],
        [0.0093, 0.5030, 0.1582],
        [0.0291, 0.6082, 0.1117],
        [0.0633, 0.7100, 0.0782],
        [0.1096, 0.7932, 0.0573],
        [0.1655, 0.8620, 0.0422],
        [0.2257, 0.9149, 0.0298],
        [0.2904, 0.9540, 0.0203],
        [0.3597, 0.9803, 0.0134],
        [0.4334, 0.9950, 0.0087],
        [0.5121, 1.0000, 0.0057],
        [0.5945, 0.9950, 0.0039],
        [0.6784, 0.9786, 0.0027],
        [0.7621, 0.9520, 0.0021],
        [0.8425, 0.9154, 0.0018],
        [0.9163, 0.8700, 0.0017],
        [0.9786, 0.8163, 0.0014],
        [1.0263, 0.7570, 0.0011],
        [1.0567, 0.6949, 0.0010],
        [1.0622, 0.6310, 0.0008],
        [1.0456, 0.5668, 0.0006],
        [1.0026, 0.5030, 0.0003],
        [0.9384, 0.4412, 0.0002],
        [0.8544, 0.3810, 0.0002],
        [0.7514, 0.3210, 0.0001],
        [0.6424, 0.2650, 0.0000],
        [0.5419, 0.2170, 0.0000],
        [0.4479, 0.1750, 0.0000],
        [0.3608, 0.1382, 0.0000],
        [0.2835, 0.1070, 0.0000],
        [0.2187, 0.0816, 0.0000],
        [0.1649, 0.0610, 0.0000],
        [0.1212, 0.0446, 0.0000],
        [0.0874, 0.0320, 0.0000],
        [0.0636, 0.0232, 0.0000],
        [0.0468, 0.0170, 0.0000],
        [0.0329, 0.0119, 0.0000],
        [0.0227, 0.0082, 0.0000],
        [0.0158, 0.0057, 0.0000],
        [0.0114, 0.0041, 0.0000],
        [0.0081, 0.0029, 0.0000],
        [0.0058, 0.0021, 0.0000],
        [0.0041, 0.0015, 0.0000],
        [0.0029, 0.0010, 0.0000],
        [0.0020, 0.0007, 0.0000],
        [0.0014, 0.0005, 0.0000],
        [0.0010, 0.0004, 0.0000],
        [0.0007, 0.0002, 0.0000],
        [0.0005, 0.0002, 0.0000],
        [0.0003, 0.0001, 0.0000],
        [0.0002, 0.0001, 0.0000],
        [0.0002, 0.0001, 0.0000],
        [0.0001, 0.0000, 0.0000],
        [0.0001, 0.0000, 0.0000],
        [0.0001, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000]
    ];
    //End data section

    //Monitor Constructor

    function SystemObj(name, xr, yr, xg, yg, xb, yb, ChromCoord, gamma) {
        var temp = new Object();

        //Sets up object for easy reference in transform code
        temp.name = name;
        temp.xr = xr;
        temp.yr = yr;
        temp.xg = xg;
        temp.yg = yg;
        temp.xb = xb;
        temp.yb = yb;
        temp.zr = 1 - xr - yr;
        temp.zg = 1 - xg - yg;
        temp.zb = 1 - xb - yb;
        temp.xw = ChromCoord[0];
        temp.yw = ChromCoord[1];
        temp.zw = 1-(temp.xw+temp.yw);
        temp.gamma = gamma;
        return temp;
    }

    //Returns a monitor object containing all the monitor data
    function getMonitor(monitor){
    switch(monitor){
    case "Adobe":
    return new SystemObj("Adobe", 0.64, 0.33, 0.21, 0.71, 0.15, 0.06, IlluminantD65, 2.2);
    break;
    case "Apple":
    return new SystemObj("Apple", 0.625, 0.34, 0.28, 0.595, 0.155, 0.07, IlluminantD65, 1.8);
    break;
    case "BestRGB":
    return new SystemObj("BestRGB",     0.7347,  0.2653,   0.215,   0.775,  0.13,  0.035,   IlluminantD50, 2.2);
    break;
    case "BetaRGB":
    return new SystemObj("BetaRGB",     0.6888,  0.3112,   0.1985,   0.7551,  0.1265,  0.0352,   IlluminantD50, 2.2);
    break;
    case "BruceRGB":
    return new SystemObj("BruceRGB",    0.64,   0.33,   0.28,   0.65,   0.15,   0.06,   IlluminantD65,  2.2 );
    break;
    case "CIE":
    return new SystemObj("CIE",           0.735, 0.265, 0.274, 0.717, 0.167, 0.009, IlluminantE,    2.2 );
    break;
    case "ColorMatch":
    return new SystemObj("ColorMatch",0.630, 0.340, 0.295, 0.605, 0.150, 0.075, IlluminantD50,    1.8 );
    break;
    case "DonRGB4":
    return new SystemObj("DonRGB4",0.696, 0.300, 0.215, 0.765, 0.130, 0.035, IlluminantD50,    2.2 );
    break;
    case "Ekta space PS5":
    return new SystemObj("Ekta space PS5",0.695, 0.305, 0.260, 0.700, 0.110, 0.005, IlluminantD50,    2.2 );
    break;
    case "HDTV":
    return new SystemObj("HDTV",               0.670,  0.330,  0.210,  0.710,  0.150,  0.060,  IlluminantD65,  2.2 )
    break;
    case "NTSC":
    return new SystemObj("NTSC",               0.67,   0.33,   0.21,   0.71,   0.14,   0.08,   IlluminantC,    2.2 );
    break;    
    case "EBU (PAL/SECAM)":
    return new SystemObj("EBU (PAL/SECAM)",0.64,   0.33,   0.29,   0.60,   0.15,   0.06,   IlluminantD65,  2.2 )
    break;
    case "ECI v2":
    return new SystemObj("ECI v2",0.670, 0.330, 0.210, 0.710, 0.140, 0.080, IlluminantD50,    2.2) 
    break;   
    case "Pro Photo":
    return new SystemObj("Pro Photo",0.7347, 0.2653, 0.1596, 0.8404, 0.0366, 0.0001, IlluminantD50,    1.8 );
    break;
    case "CIE REC 709":
    return new SystemObj("CIE REC 709",    0.64,   0.33,   0.30,   0.60,   0.15,   0.06,   IlluminantD65,  2.2 );
    break; 
    case "SMPTE":
    return new SystemObj("SMPTE",              0.630,  0.340,  0.310,  0.595,  0.155,  0.070,  IlluminantD65,  2.2 );
    break; 
    case "sRGB":
    return new SystemObj("sRGB",                0.640,  0.330,  0.300,  0.600,  0.150,  0.060,  IlluminantD65,  2.2 );
    break; 
    case "700/525/450nm":
    return new SystemObj("700/525/450nm",  0.7347, 0.2653, 0.1152, 0.0584, 0.1566, 0.0177, IlluminantD50,  2.2 );
    break; 
    }

    }

    //Power Calculator

    function plankianPowerCalculator(wavelength, blackBodyTemp) {
        var wlm = wavelength * 1e-9; // Wavelength in meters 
        var power = (3.74183e-16 * Math.pow(wlm, -5.0)) /
            (Math.exp(1.4388e-2 / (wlm * blackBodyTemp)) - 1.0);
        return power;
    }

    //Converts spectrum values to x,y,z
    function get_xyz_from_spec(ref_i, colorTemp) {
        var X = 0,
            Y = 0,
            Z = 0,
            N = 0,
            XYZ;

        //Sums the X Y Z over a given dataset
        for (var i=0, lambda = 380,j=0; lambda < 730.1;i+=2, lambda += 10,j++) {
            var power;
            power = plankianPowerCalculator(lambda, colorTemp);
            X += (power * cie_colour_match[i][0]*colorChecker[ref_i][j]);
            Y += (power * cie_colour_match[i][1]*colorChecker[ref_i][j]);
            Z += (power * cie_colour_match[i][2]*colorChecker[ref_i][j]);
            //Normalizes the scale
            N += cie_colour_match[i][1]*power;
        }

        var x = X *(1/N);
        var y = Y *(1/N);
        var z = Z *(1/N);
        //Print to table
        $("#table").append("<br/>");
        $("#table").append(ref_i+": "+x.toFixed(4)+"  "+y.toFixed(4)+"  "+z.toFixed(4));

        return [x, y, z];

    }

    //Function for multiplying a 3x3 matrix by a 3x1 vector
    function multVec3(mat,vec){
    var x = vec[0], y = vec[1], z = vec[2];
    var dest = new vec3.create();

    dest[0] = mat[0] * x + mat[1] * y + mat[2] * z;
    dest[1] = mat[3] * x + mat[4] * y + mat[5] * z;
    dest[2] = mat[6] * x + mat[7] * y + mat[8] * z;

    return dest;
    }

    //Multiplies matrix through scale factor 
    function getTransformMatrix(mat,vec){
        var dest = new mat3.create();
        dest[0] = mat[0]*vec[0];
        dest[1] = mat[1]*vec[1];
        dest[2] = mat[2]*vec[2];
        dest[3] = mat[3]*vec[0];
        dest[4] = mat[4]*vec[1];
        dest[5] = mat[5]*vec[2];
        dest[6] = mat[6]*vec[0];
        dest[7] = mat[7]*vec[1];
        dest[8] = mat[8]*vec[2];

        return dest;
    }

    //Computes transformation matrix for given luminence and monitor primaries - then converts xyz to rgb values
    function get_rgb_from_xyz(xc,yc,zc,monitor){

    //Create monitor primary object
    var system = getMonitor(monitor);

    //Create scaled xyz matrix to Y and white vector based off values
    var whiteVector = new vec3.create([system.xw/system.yw,1,system.zw/system.yw]);
    var xyzMatrix = new mat3.create([system.xr/system.yr, system.xg/system.yg, system.xb/system.yb, 1,1,1,system.zr/system.yr,system.zg/system.yg,system.zb/system.yb]);

    //Switch to mat4 to invert, then switch it back
    xyzMatrix = mat3.toMat4(xyzMatrix);
    var xyzInverse = mat4.toInverseMat3(xyzMatrix);

    //Finds scale factor by multiplying the white vector by the xyz inverse
    var scaleVector = multVec3(xyzInverse,whiteVector);

    //Reset to 3x3 matrix
    var xyzMatrix = new mat3.create([system.xr/system.yr, system.xg/system.yg, system.xb/system.yb, 1,1,1,system.zr/system.yr,system.zg/system.yg,system.zb/system.yb]);

    var transformMatrix = getTransformMatrix(xyzMatrix,scaleVector);
    transformMatrix = mat3.toMat4(transformMatrix);

    //Find appropriate matrix to convert xyz to rgb
    var inverseTransform = mat4.toInverseMat3(transformMatrix);

    var XYZSpecVec = [xc,yc,zc];
    var rgb = multVec3(inverseTransform,XYZSpecVec);

    //Sets them to 0 if under 0 for gamut
    if(rgb[0]<0)
        rgb[0]=0;
    if(rgb[1]<0)
        rgb[1]=0;
    if(rgb[2]<0)
        rgb[2]=0;

    //Print RGB values to table
    $("#table").append("    "+(rgb[0]).toFixed(4)+"  "+(rgb[1]).toFixed(4)+"  "+(rgb[2]).toFixed(4));

    return rgb;
    }

    
    function start(colorTemp,monitor) {
        canvas = document.getElementById("mycanvas");
        gl = canvas.getContext("experimental-webgl");

        //Resets table
        $("#table").html("x       y       z           r       g       b");

        //Set view port and clear canvas to white
        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.clearColor(1, 1, 1, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);

        var vertex = document.getElementById("vertex").firstChild.nodeValue;
        var frag = document.getElementById("fragment").firstChild.nodeValue;

        //Create and make vertex and frag shaders
        var vShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vShader, vertex);
        gl.compileShader(vShader);

        var fShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fShader, frag);
        gl.compileShader(fShader);

        //Attach to program
        program = gl.createProgram();
        gl.attachShader(program, vShader);
        gl.attachShader(program, fShader);
        gl.linkProgram(program);


        //aspect ratio of canvas
        var aspect = canvas.width / canvas.height;

        var translateYScalar = .35;
        var X = 0,
            Y = 0,
            Z = 0;

        //TOP ROW
        for (var i = 0; i < 4; i++) {
            translateYScalar += -.35;
            var translateXScalar = -.31;
            //Draws a square in the current row
            for(var j=0;j<6;j++) {
                X += .1
                Y += .1
                Z += .1
                translateXScalar += .325;
                var squareVertices = new Float32Array([-1 + translateXScalar, .95 + translateYScalar, -.75 + translateXScalar, .95 + translateYScalar, -.75 + translateXScalar, .55 + translateYScalar, // Triangle 1
                    -1 + translateXScalar, .95 + translateYScalar, -1 + translateXScalar, .55 + translateYScalar, -.75 + translateXScalar, .55 + translateYScalar // Triangle 2
                ]);
                
                //Get color
                var xyzArray = get_xyz_from_spec((i*6+j),colorTemp);
                var x = xyzArray[0];
                var y = xyzArray[1];
                var z = xyzArray[2];
                var rgbArray = get_rgb_from_xyz(x,y,z,monitor);
                var r = rgbArray[0];
                var g = rgbArray[1];
                var b = rgbArray[2]; 

                //Drawing the current square
                vbuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);
                gl.bufferData(gl.ARRAY_BUFFER, squareVertices, gl.STATIC_DRAW);

                itemSize = 2;
                numItems = squareVertices.length / itemSize;

                gl.useProgram(program);

                program.uColor = gl.getUniformLocation(program, "uColor");
                gl.uniform4fv(program.uColor, [r, g, b, 1.0]);

                program.aVertexPosition = gl.getAttribLocation(program, "aVertexPosition");
                gl.enableVertexAttribArray(program.aVertexPosition);
                gl.vertexAttribPointer(program.aVertexPosition, itemSize, gl.FLOAT, false, 0, 0);

                //Finish drawing the square
                gl.drawArrays(gl.TRIANGLES, 0, numItems);

                //Drawing the Points
                var pointVertices = []; //new Float32Array([squareVertices[0], squareVertices[1], squareVertices[squareVertices.length - 2], squareVertices[squareVertices.length - 1]]);
                var xDistance = squareVertices[squareVertices.length - 2] - squareVertices[0];
                var count = 0;

                //Scales and pushes color checker values into an array to draw
                var yScale = squareVertices[squareVertices.length - 1];
                var yDistance = squareVertices[squareVertices.length - 1] - squareVertices[1];
                for(z=squareVertices[0];z<squareVertices[squareVertices.length - 2];z+=(xDistance/36)){
                    var temp = i*6+j;
                    //Push proper x value into verticies
                    pointVertices.push(z);
                    pointVertices.push((colorChecker[i*6+j][count]/4)+yScale);
                    count++;
                }

                pointVertices = new Float32Array(pointVertices);

                gl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);
                gl.bufferData(gl.ARRAY_BUFFER, pointVertices, gl.STATIC_DRAW);
                gl.enableVertexAttribArray(program.aVertexPosition);
                gl.vertexAttribPointer(program.aVertexPosition, itemSize, gl.FLOAT, false, 0, 0);

                numItems = pointVertices.length / itemSize;
                //Line color (complimentary)
                gl.uniform4fv(program.uColor, [1-r, 1-g, 1-b, 1.0]);

                //Render line between points
                gl.drawArrays(gl.LINE_STRIP, 0, numItems);
                //Render Points
                gl.drawArrays(gl.POINTS, 0, numItems);



            } //End row loop
            translateYScalar += -.15;
        } //End drawing

    }
    </script>
</head>
<canvas id="mycanvas" width="1080" height="800" style="float:left"></canvas>
<div id="side" style="float:left; padding:10px;">
    <body onload="start(3000,'Adobe')">
        Color Temperature:
        <input type="range" id ="rangeTemp" value="3000" step="500" min="1000" max="10000">
        <p id="temp"></p>
        <select id="selector">
            <option value="Adobe">Adobe</option>
            <option value="Apple">Apple</option>
            <option value="BestRGB">BestRGB</option>
            <option value="CIE">CIE</option>
            <option value="ColorMatch">ColorMatch</option>
            <option value="DonRGB4">DonRGB4</option>
            <option value="ECI v2">ECI v2</option>
            <option value="Ekta space PS5">Ekta space PS5</option>
            <option value="HDTV">HDTV</option>
            <option value="NTSC">NTSC</option>
            <option value="EBU (PAL/SECAM)">EBU (PAL/SECAM)</option>
            <option value="Pro Photo">Pro Photo</option>
            <option value="CIE REC 709">CIE REC 709</option>
            <option value="SMPTE">SMPTE</option>
            <option value="sRGB">sRGB</option>
            <option value="700/525/450nm">700/525/450nm</option>
            BestRGB
        </select>
        <br/>
        <pre id="table">x       y       z           r       g       b</pre>
</div>
</body>

</html>
