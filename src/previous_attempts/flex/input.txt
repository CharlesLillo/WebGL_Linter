<html>
<head>
    <script id="vertex-code" type="x-shader">
    attribute vec2 vertexPoint;

    void main() {
        gl_Position = vec4(vertexPoint, 0.0, 1.0);
    }
    </script>

    <script id="fragment-code" type="x-shader">
    #ifdef GL_ES
    precision highp float;
    #endif

    uniform vec4 fragColor;

    void main() {
        gl_FragColor = fragColor;
    }
    </script>

    <script type="text/javascript">
    function init() {

        //GL setup
        canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("experimental-webgl");
        var size = canvas.width / canvas.height;

        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.clearColor(0, 0.5, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);

        //Build shaders
        var vertex = document.getElementById("vertex-code").firstChild.nodeValue;
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertex);
        gl.compileShader(vertexShader);


        var frag = document.getElementById("fragment-code").firstChild.nodeValue;
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, frag);
        gl.compileShader(fragmentShader);

        //Set shaders to program
        program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);


        //Declare vertcies
        var triVertices = new Float32Array([
        -0.4, 0.5, 
        0, -0.8 , 
        -0.8, -0.8
         ]);

        var squareVertices = new Float32Array([
        .25, .25*size, .75, .25*size,  .75,-.25*size,  // first triangle
        .25, .25*size, .75,-.25*size, .25,-.25*size   // second triangle
        ]);

        var curveVertices = new Float32Array([
        -.9,.9,-.8,.8,-.7,.7,-.6,.8,-.5,.9,-.3,.5
        ]);

        //Drawing the triangle
        vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, triVertices, gl.STATIC_DRAW);

        var sizeOfArrayItems = 2;
        var numItemsToDraw = triVertices.length / sizeOfArrayItems;

        gl.useProgram(program);

        program.fragColor = gl.getUniformLocation(program, "fragColor");
        gl.uniform4fv(program.fragColor, [0.5, 0.5, 0.5, 1.0]);

        program.vertexPoint = gl.getAttribLocation(program, "vertexPoint");
        gl.enableVertexAttribArray(program.vertexPoint);
        gl.vertexAttribPointer(program.vertexPoint, sizeOfArrayItems, gl.FLOAT, false, 0, 0);

        gl.drawArrays(gl.TRIANGLES, 0, numItemsToDraw);

        //Drawing the square
        numItemsToDraw = squareVertices.length / sizeOfArrayItems;

        program.fragColor = gl.getUniformLocation(program, "fragColor");
        gl.uniform4fv(program.fragColor, [1, 0.5, 0.5, 1.0]);

        gl.bufferData(gl.ARRAY_BUFFER, squareVertices, gl.STATIC_DRAW);
        gl.vertexAttribPointer(program.vertexPoint, sizeOfArrayItems, gl.FLOAT, false, 0, 0);

        gl.drawArrays(gl.TRIANGLES, 0, numItemsToDraw);

        //Drawing a curve
        numItemsToDraw = curveVertices.length / sizeOfArrayItems;

        program.fragColor = gl.getUniformLocation(program, "fragColor");
        gl.uniform4fv(program.fragColor, [1, 1, 0.5, 1.0]);

        gl.bufferData(gl.ARRAY_BUFFER, curveVertices, gl.STATIC_DRAW);
        gl.vertexAttribPointer(program.vertexPoint, sizeOfArrayItems, gl.FLOAT, false, 0, 0);

        gl.drawArrays(gl.LINE_STRIP, 0, numItemsToDraw);

    }
    </script>
</head>

<body onload="init()">
    <h1>Practice Assignment 2 - Charles Lillo</h1>
    <canvas id="myCanvas" width="800" height="500"style="border:5px solid red;">
</body>

</html>
